<?php

namespace AppBundle\Repository;

/**
 * NetworkRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NetworkRepository extends \Doctrine\ORM\EntityRepository
{
	public function listMutualFriends($me, $user_id) {

		$query = "SELECT u.* FROM user u INNER JOIN network n ON u.id = n.from_user_id
				  	WHERE n.user_id = :me AND n.status = 'accepted'
				  	AND n.from_user_id IN (SELECT n.user_id FROM network n WHERE n.from_user_id = :user AND n.status = 'accepted' UNION ALL SELECT n.from_user_id FROM network n WHERE n.user_id = :user AND n.status = 'accepted')
				  UNION ALL
				  SELECT u.* FROM user u INNER JOIN network n ON u.id = n.user_id
				  	WHERE n.from_user_id = :me AND n.status = 'accepted'
				  	AND n.user_id IN (SELECT n.user_id FROM network n WHERE n.from_user_id = :user AND n.status = 'accepted' UNION ALL SELECT n.from_user_id FROM network n WHERE n.user_id = :user AND n.status = 'accepted')
				  ORDER BY name";

		$params = array('me' => $me, 'user' => $user_id);

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);

		return $sth->fetchAll();
	}

	public function getConnections($user_id) {
		$query = "SELECT u.* FROM user u INNER JOIN network n ON u.id = n.from_user_id WHERE n.user_id = ? AND n.status = ?
				  UNION ALL
				  SELECT u.* FROM user u INNER JOIN network n ON u.id = n.user_id WHERE n.from_user_id = ? AND n.status = ?
				  ORDER BY name
		";
		$params = array($user_id, "accepted", $user_id, "accepted");

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);

		return $sth->fetchAll();
	}

	public function getNumConnections($user_id) {
		$query = "SELECT COUNT(*) as CNT FROM network WHERE (from_user_id = ? or user_id = ?) AND status = ?";
		$params = array($user_id, $user_id, "accepted");

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);

		$row = $sth->fetch();

		if($row != null) {
			return $row['CNT'];
		}
		return false;
	}

	public function findAcceptedUserConnections($userId)
    {
        $qb = $this->createQueryBuilder('n')
            ->where('(n.user = :id  or n.fromUser = :id) and n.status = :status')
            ->setParameters(['id' => $userId, 'status' => 'accepted'])
            ->addSelect('u')
            ->innerJoin('n.user', 'u')
            ->addSelect('f')
            ->innerJoin('n.fromUser', 'f');

        return $qb->getQuery()->getResult();
    }

    public function findPeopleYouMayKnow($userId)
    {
    	$query = "SELECT DISTINCT u.id, u.name, u.avatar 
    	FROM network n 
    	INNER JOIN user u ON (u.id = n.from_user_id AND n.user_id IN (
    		SELECT u2.id 
    		FROM network n2 
    		INNER JOIN user u2 ON (u2.id = n2.from_user_id AND n2.user_id = :id) OR (u2.id = n2.user_id AND n2.from_user_id = :id) 
    	)) OR (u.id = n.user_id AND n.from_user_id IN (
    		SELECT u3.id 
    		FROM network n3 
    		INNER JOIN user u3 ON (u3.id = n3.from_user_id AND n3.user_id = :id) OR (u3.id = n3.user_id AND n3.from_user_id = :id) 
    	))
    	WHERE u.id NOT IN (
    		SELECT u4.id 
    		FROM network n4 
    		INNER JOIN user u4 ON (u4.id = n4.from_user_id AND n4.user_id = :id) OR (u4.id = n4.user_id AND n4.from_user_id = :id) 
    	)
    	AND u.id <> :id
    	LIMIT 10";

		$params = array(
			'id' => $userId
		);

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);

		$rows = $sth->fetchAll();
 
        return $rows;
    }

	public function findLatestFriends($userId)
    {
    	$query = "SELECT u.id, u.name, u.avatar 
    				FROM network n 
    				INNER JOIN user u ON (u.id = n.from_user_id AND n.user_id = :id)  OR  (u.id = n.user_id  AND n.from_user_id = :id) 
    				WHERE n.status = :status
    				ORDER BY n.id DESC
    				LIMIT 10";

		$params = array(
			'id' => $userId,
			'status' => 'accepted'
		);

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);

		$rows = $sth->fetchAll();
 
        return $rows;
    }

	public function findOnlineFriends($userId)
    {
		$client = \Yiin\RocketChat\Client::getInstance();

    	$query = "SELECT u.id, u.name, u.avatar 
    				FROM network n 
    				INNER JOIN user u ON (u.id = n.from_user_id AND n.user_id = :id)  OR  (u.id = n.user_id  AND n.from_user_id = :id) 
    				WHERE n.status = :status";

		$params = array(
			'id' => $userId,
			'status' => 'accepted'
		);

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);

		$rows = $sth->fetchAll();

		$i = 0;

		foreach($rows as $key => $row) {
			if($i > 10) {
				unset($rows[$key]);
				continue;
			}
			$result = $client->usersAPI()->getPresence(
				'username',
				'u' . $row['id']
			);

			if($result->presence != 'online') {
				unset($rows[$key]);
			} else {
				$i++;
			}
		}
 
        return $rows;
    }

    public function findAllUserConnections($userId)
    {
        $qb = $this->createQueryBuilder('n')
            ->where('n.user = :id  or n.fromUser = :id')
            ->setParameter('id', $userId)
            ->addSelect('u')
            ->innerJoin('n.user', 'u')
            ->addSelect('f')
            ->innerJoin('n.fromUser', 'f');

        return $qb->getQuery()->getResult();
    }

    public function removeConnection($from_user_id, $user_id) {

    	$query = "SELECT id FROM network WHERE from_user_id = ? and user_id = ?";
		$params = array($from_user_id, $user_id);

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);

		$row = $sth->fetch();

		if($row != null) {
			$connection_id = $row['id'];

			$query = "DELETE FROM notification WHERE user_id = ? and data = ?";
			$params = array($user_id, "{\"connection_id\":" . $connection_id . ",\"user_id\": " . $from_user_id . "}");

			$sth = $this->getEntityManager()->getConnection()->prepare($query);
			$sth->execute($params);
		}

		$query = "DELETE FROM network WHERE (from_user_id = ? AND user_id = ?) or (from_user_id = ? AND user_id = ?)";
		$params = array($from_user_id, $user_id, $user_id, $from_user_id);

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);
		$this->getEntityManager()->flush();
    }

    public function addConnection($data) {
 		$query = "INSERT INTO network (from_user_id, user_id, status) VALUES (?, ?, ?)";

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($data);

		$sth = $this->getEntityManager()->getConnection()->prepare("SELECT LAST_INSERT_ID() as ID");
    	$sth->execute();

    	$row = $sth->fetch();

 		if($row != null) {
			return $row['ID'];
		}
		return 0;
    }

    public function hasConnection($fromUserId, $toUserId)
    {
		$query = "SELECT COUNT(*) as CNT FROM network WHERE (from_user_id = ? and user_id = ?) or (from_user_id = ? and user_id = ?)";
		$params = array($fromUserId, $toUserId, $toUserId, $fromUserId);

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);

		$row = $sth->fetch();

		if($row != null) {
			return $row['CNT'] > 0;
		}
		return false;
    }

    public function isFriend($fromUserId, $toUserId)
    {
		$query = "SELECT COUNT(*) as CNT FROM network WHERE (from_user_id = ? and user_id = ? and status = ?) or (from_user_id = ? and user_id = ? and status = ?)";
		$params = array($fromUserId, $toUserId, 'accepted', $toUserId, $fromUserId, 'accepted');

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);

		$row = $sth->fetch();

		if($row != null) {
			return $row['CNT'] > 0;
		}
		return false;
    }

    public function findConnection($userId, $fromUserId)
    {
        $qb = $this->createQueryBuilder('n')
            ->where('n.user = :id  and n.fromUser = :fromUserId')
            ->orWhere('n.user = :fromUserId  and n.fromUser = :id')
            ->setParameters(['id' => $userId, 'fromUserId'=> $fromUserId]);

        return $qb->getQuery()->getSingleResult();
    }
}
