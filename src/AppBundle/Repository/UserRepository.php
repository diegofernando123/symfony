<?php

namespace AppBundle\Repository;

use \Symfony\Component\Security\Core\Encoder\BCryptPasswordEncoder;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
	public function updateSalt($id, $salt) {
		$query = "UPDATE user SET salt = ? WHERE id = ?";
		$params = array($salt, $id);

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);
		$this->getEntityManager()->flush();
	}

	public function isVotedByUser($id, $user_id) {
		$query = "SELECT COUNT(*) AS CNT FROM user_votes WHERE vote_user_id = ? and user_id = ?";
		$params = array($id, $user_id);

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);
		$row = $sth->fetch();

		return $row['CNT'] > 0;
	}

	public function lookup($id) {
		$query = "SELECT u.* FROM user u WHERE id = ?";
		$params = array($id);

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);

		return $sth->fetch();
	}

	public function listVoted($user_id) {
		$query = "SELECT u.id, u.name FROM user_votes v INNER JOIN user u ON u.id = v.user_id WHERE v.vote_user_id = ?";
		$params = array($user_id);

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);
		return $sth->fetchAll();
	}

	public function numVotes($user_id) {
		$query = "SELECT COUNT(*) AS CNT FROM user_votes WHERE vote_user_id = ?";
		$params = array($user_id);

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);
		$row = $sth->fetch();

		return $row['CNT'];
	}

	public function hasVote($user_id, $vote_user_id) {
		$query = "SELECT COUNT(*) AS CNT FROM user_votes WHERE user_id = ? AND vote_user_id = ?";
		$params = array($user_id, $vote_user_id);

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);
		$row = $sth->fetch();

		return $row['CNT'] >= 1;
	}

	public function addVote($user_id, $vote_user_id) {
		$query = "INSERT INTO user_votes (user_id, vote_user_id) VALUES (?, ?)";
		$params = array($user_id, $vote_user_id);

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);
	}

	public function removeVote($user_id, $vote_user_id) {
		$query = "DELETE FROM user_votes WHERE user_id = ? AND vote_user_id = ?";
		$params = array($user_id, $vote_user_id);

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);
	}

	public function isActivated($data) {
		$query = "SELECT enabled FROM user WHERE email = ?";
		$params = array($data['email']);

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);
		$row = $sth->fetch();

		return $row['enabled'] == 1;
	}

	public function getAvatar($id) {
		$query = "SELECT avatar FROM user WHERE id = ?";
		$params = array($id);

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);
		$row = $sth->fetch();

		return $row == null ? null : $row['avatar'];
	}

	public function updateAvatar($id, $avatar) {
		$query = "UPDATE user SET avatar = ? WHERE id = ?";
		$params = array($avatar, $id);

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);
	}

	public function updateCoverImage($id, $file) {
		$query = "UPDATE user SET cover_image = ?  WHERE id = ?";
		$params = array(
			$file,
			$id
		);

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);
	}

	public function update($user) {
		$query = "UPDATE user SET name = ?, position = ?, lastDiploma = ?, organization = ?, educationYear = ?, location = ?, email = ?, link = ?, avatar = ?, about = ?, industry = ?  WHERE id = ?";
		$params = array(
			$user->getName(),
			$user->getPosition(),
			$user->getLastDiploma(),
			$user->getOrganization(),
			$user->getEducationYear(),
			$user->getLocation(),
			$user->getEmail(),
			$user->getLink(),
			$user->getAvatar(),
			$user->getAbout(),
			$user->getIndustry(),
			$user->getId()
		);

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);
	}

	public function getPhotosAndVideos($user_id) {

		$query = "SELECT id, 'photo' as type, title, description, image, created_at FROM photo WHERE user_id = ? 
					UNION ALL
				  SELECT id, 'video' as type, title, description, yid as image, created_at FROM video WHERE user_id = ? 
		 		  ORDER BY created_at DESC";

		$params = array($user_id, $user_id);

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);

		return $sth->fetchAll();
	}

	public function getNumMedia($user_id) {

		$cnt = 0;

		$query = "SELECT COUNT(*) as CNT FROM photo WHERE user_id = ?";
		$params = array($user_id);

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);

		$row = $sth->fetch();

		if($row != null) {
			$cnt = $cnt + $row['CNT'];
		}

		$query = "SELECT COUNT(*) as CNT FROM video WHERE user_id = ?";
		$params = array($user_id);

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);

		$row = $sth->fetch();

		if($row != null) {
			$cnt = $cnt + $row['CNT'];
		}

		return $cnt;
	}

	public function checkCredentials($data) {
		$query = "SELECT salt, password FROM user WHERE email = ?";
		$params = array($data['email']);

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);

		$row = $sth->fetch();

		if($row == null) {
			return false;
		}

		$encoder = new BCryptPasswordEncoder(13);

		return $encoder->isPasswordValid($row['password'], $data['password'], $row['salt']);
	}

	public function isExistsEmail($email) {
		if(strlen($email) == 0) {
			return false;
		}

		$query = "SELECT * FROM user WHERE email = ?";
		$params = array($email);

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);

		$row = $sth->fetch();

		if($row != null) {
			return true;
		}
		return false;
	}

	public function isExists($data, $user_id = null) {
		$data['email'] = trim($data['email']);
		
		if(strlen($data['email']) == 0) {
			return false;
		}
		
		$query = "SELECT * FROM user WHERE email = ?";
		$params = array($data['email']);

		if($user_id != null && $user_id > 0) {
			$query = $query . " AND id <> ?";
			$params[] = $user_id;
		}

		$sth = $this->getEntityManager()->getConnection()->prepare($query);
		$sth->execute($params);

		$row = $sth->fetch();

		if($row != null) {

			if(!isset($data['password'])) {
				return true;
			}

			return $row['password'] == sha1($row['salt'] . $data['password']);
		}

		if(isset($data['password'])) {
			$sth = $this->getEntityManager()->getConnection()->prepare("SELECT * FROM user WHERE username = ?");
			$sth->execute(array($data['email']));
			$row = $sth->fetch();

			if($row != null) {
				return $row['password'] == sha1($row['salt'] . $data['password']);
			}
		}

		return false;
	}

	public function findAllWithoutUser($userId)
    {
    	$qb = $this->createQueryBuilder('u')
            ->where('u.id not in (:id)')
       //     ->andWhere('u.enabled = :enabled')
    //        ->andWhere('u.locked = :locked')
            ->setParameters(['id' => $userId/*, 'enabled' => true, 'locked' => false*/]);

        return $qb->getQuery()->getResult();
    }

    public function findAllContacts() {
    	
    }
}